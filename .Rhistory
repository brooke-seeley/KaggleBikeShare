step_mutate(weather=factor(ifelse(weather == 4, 3, weather))) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow")
## Print First 5 Rows of Baked Dataset
baked <- bake(prep(bike_recipe), new_data = NULL)
head(baked, 5)
## Create Regression Model
bike_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(bike_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(count_pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
library(tidyverse)
library(tidymodels)
library(vroom)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=factor(weather))
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow")
library(tidyverse)
library(tidymodels)
library(vroom)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=factor(weather)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow")
## Print First 5 Rows of Baked Dataset
baked <- bake(prep(bike_recipe), new_data = NULL)
head(baked, 5)
## Create Regression Model
bike_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(bike_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(count_pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
library(tidyverse)
library(tidymodels)
library(vroom)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday))
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow")
library(tidyverse)
library(tidymodels)
library(vroom)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow")
## Print First 5 Rows of Baked Dataset
baked <- bake(prep(bike_recipe), new_data=trainData)
head(baked, 5)
## Create Regression Model
bike_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(bike_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(count_pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
library(tidyverse)
library(tidymodels)
library(vroom)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow")
## Print First 5 Rows of Baked Dataset
baked <- bake(prep(bike_recipe), new_data=trainData)
head(baked, 5)
## Create Regression Model
bike_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(bike_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(count = exp(count))
library(tidyverse)
library(tidymodels)
library(vroom)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow")
## Print First 5 Rows of Baked Dataset
baked <- bake(prep(bike_recipe), new_data=trainData)
head(baked, 5)
## Create Regression Model
bike_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(bike_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(.pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
baked <- bake(prep(bike_recipe), new_data=trainData)
head(baked, 5)
baked <- bake(prep(bike_recipe), new_data=trainData)
head(baked, 5)
library(tidyverse)
library(tidymodels)
library(vroom)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
## Create Penalized Regression Model
### Combo 1: Penalty 0 and Mixture 0
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=trainData)
install.packages("glmnet")
library(tidyverse)
library(tidymodels)
library(vroom)
library(glmnet)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors())
## Create Penalized Regression Model
### Combo 1: Penalty 0 and Mixture 0
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
### Combo 2: Penalty 1 and Mixture 0.5
### Combo 3: Penalty 1 and Mixture 1
### Combo 4: Penalty 5 and Mixture 0.25
### Combo 5: Penalty 2 and Mixture 0.75
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=trainData)
library(tidyverse)
library(tidymodels)
library(vroom)
library(glmnet)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
## Create Penalized Regression Model
### Combo 1: Penalty 0 and Mixture 0
preg_model <- linear_reg(penalty=0, mixture=0) %>%
set_engine("glmnet")
### Combo 2: Penalty 1 and Mixture 0.5
### Combo 3: Penalty 1 and Mixture 1
### Combo 4: Penalty 5 and Mixture 0.25
### Combo 5: Penalty 2 and Mixture 0.75
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(.pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
preg_model <- linear_reg(penalty=1, mixture=0.5) %>%
set_engine("glmnet")
### Combo 3: Penalty 1 and Mixture 1
### Combo 4: Penalty 5 and Mixture 0.25
### Combo 5: Penalty 2 and Mixture 0.75
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(.pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
preg_model <- linear_reg(penalty=1, mixture=1) %>%
set_engine("glmnet")
### Combo 4: Penalty 5 and Mixture 0.25
### Combo 5: Penalty 2 and Mixture 0.75
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(.pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
preg_model <- linear_reg(penalty=5, mixture=0.25) %>%
set_engine("glmnet")
### Combo 5: Penalty 2 and Mixture 0.75
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(.pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
preg_model <- linear_reg(penalty=2, mixture=0.75) %>%
set_engine("glmnet")
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(bike_workflow, new_data = testData) %>%
mutate(.pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
library(tidyverse)
library(tidymodels)
library(vroom)
library(glmnet)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
## Create Penalized Regression Model for Tuning
preg_model <- linear_reg(penalty=tune(),
mixture=tune()) %>%
set_engine("glmnet")
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model)
## Tuning
### Grid of Values
grid_of_tuning_params <- grid_regular(penalty(),
mixture(),
levels = L)
folds <- vfold_cv(trainData, v = K, repeats=1)
library(tidyverse)
library(tidymodels)
library(vroom)
library(glmnet)
## Read in Training Data & Clean
trainData <- vroom('train.csv') %>%
select(-casual, -registered) %>%
mutate(count = log(count))
## Read in Test Data
testData <- vroom('test.csv')
## Feature Engineering
bike_recipe <- recipe(count~., data=trainData) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>%
step_mutate(weather=as.factor(weather)) %>%
step_mutate(holiday=as.factor(holiday)) %>%
step_mutate(workingday=as.factor(workingday)) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(season=factor(season)) %>%
step_date(datetime, features="dow") %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_numeric_predictors()) %>%
step_rm(datetime)
## Create Penalized Regression Model for Tuning
preg_model <- linear_reg(penalty=tune(),
mixture=tune()) %>%
set_engine("glmnet")
## Create Workflow
bike_workflow <- workflow() %>%
add_recipe(bike_recipe) %>%
add_model(preg_model)
## Tuning
### Grid of Values
grid_of_tuning_params <- grid_regular(penalty(),
mixture(),
levels = 5)
### Split Data & Run CV
folds <- vfold_cv(trainData, v = 10, repeats=1)
CV_results <- bike_workflow %>%
tune_grid(resamples=folds,
grid=grid_of_tuning_params,
metrics=metric_set(rmse, mae, rsq))
### Best Parameters
bestTune <- CV_results %>%
select_best(metric="rmse")
## Finalize Workflow & FIt
final_wf <-
bike_workflow %>%
finalize_workflow(bestTune) %>%
fit(data=trainData)
## Run Predictions
bike_predictions <- predict(final_wf, new_data = testData) %>%
mutate(.pred = exp(.pred))
## Format the Predictions for Submission to Kaggle
kaggle_submission <- bike_predictions %>%
bind_cols(., testData) %>%
select(datetime, .pred) %>%
rename(count=.pred) %>%
mutate(count=pmax(0, count)) %>%
mutate(datetime=as.character(format(datetime)))
## Write Submission File
vroom_write(x=kaggle_submission, file="./LinearPreds.csv", delim=',')
